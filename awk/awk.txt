当脚本包含在命令行时，它应该用引号引起来，在shell中形成保护。
awk 'pattern{action}' input-file

FS 输入字段分隔符
RS 输入记录分隔符
OFS 输出字段分隔符
ORS 输出记录分隔符

AWK脚本的结构：
1.初始化处理仅在awk开始读取文件之前一次完成。它由关键字BEGIN来标识，指令封入一组大括号内。开始指令用来初始化变量，
创建报告标题并完成文件处理开始之前必须完成的其它处理。
2.主体是处理文件数据的循环。awk从文件读取首记录或行时，主体开始。然后它可以通过主体指令处理数据，并将它们合理应用。
当到达主体指令结束时，awk通过读取下一次记录或行来重复处理过程，并依靠主体指令处理它。
这样，awk实用程序通过主体内的指令逐个处理文件的每个记录或行。
3.在所有输入数据被读取后，执行结束处理，此刻，处理期间积累的信息就可以被分析和打印，或进行其他的结束活动。

表达式：
1.正则表达式：匹配（~）和不匹配（！～）。使用正则表达式时，记住它必须放在两个斜线“/”和“/”之间。
例如：$0~/^A.*B$/  匹配以A开始且以B结束的记录
              $3!~/^ /     第三个字段必须不以空格开始
              $4!~/bird/   第四个字段不包含bird
2.算术表达式
3.关系表达式

例子：awk '$2=="computer"&&$3>10000 {print}' sales.dat 打印所有大于10000的计算机销售额

动作：
在awk中称为动作是因为它们当模式为true时行动。awk中动作是与一个模式相联系的一个或多个语句。
在动作和模式之间只是一对一的关系：一个动作只与一个模式相联系。
动作语句必须放在一组大括号内；即使只有一个语句也必须使用大括号。一组大括号包含模式/动作对或称为块的动作。
当动作由几个语句组成时，它们必须用语句分隔符分割。awk中语句分隔符有分号，换行符或一组大括号。

表达式语句：
当表达式用在模式部分时，它有一个值，有时候有效果。值不是true就是false，用来选择或跳过要处理的行。
如果产生效果，将改变缓冲区或变量的内容。当表达式用在动作部分时，它也有值和效果。但是，值为数学值或逻辑值。
其效果可以改变变量或缓冲区的值。当使用表达式只是为了其效果而放弃其值时，表达式就是表达式语句。

例子：计算学生平均分数（while循环）
{total=o
 count=0
 i=2

while(i<=NF)
     {total+=$i
      count++
      i++
     }
if(count>0)
   {
    argv=total/count
    print($1,avrg)
   }
}


BEGIN
{
 FS="|"
 RS="\n"
 a=0;b=0;c=0
}
{
 if(a=$1)
 {
  printf("%s|%s|%s|\n",a,b,c)
 }
 else
 {
 printf("%s|%s|%s|\n",$1,$2,$3)
 a=$1
 b=$2
 c=$3
 }
}
 if



EC:
1.对FILE结构体变量的定义是在stdio.h头文件中由系统事先指定的。

shell & awk 变量传递+awk综合概要
1."'$var'"
#!/bin/bash
var="test"
awk 'BEGIN{print "'$var'"}'
这种写法要求变量var中不含有空格。若var中含有空格，那么就要用 “‘“$var”’”
如果变量赋值在awk里面,则print不需要$符号.
BEGIN{
var="test"
print var
}

2.export变量，然后用ENVIRON［“var”］
#!/bin/bash
var="test"
export var
awk 'BEGIN{print ENVIRON["var"]}'

3.使用-v选项。
#!/bin/bash
var="test"
awk -v nvar="$var" 'BEGIN{print nvar}'

shell使用awk传递出来的变量
eval
along@along-laptop:~/code/shell/shell$ cat awktest.sh
#!/bin/bash
var1="test"
var2="along"
eval $(awk 'BEGIN{print "var1=along;var2=test"}')
echo "var1:"$var1
echo "var2:"$var2
along@along-laptop:~/code/shell/shell$ ./awktest.sh 
var1:along
var2:test

1.awk概要
2、AWK部份内置变量： 
　FILENAME　当前文件名 
　FNR当前文件的总共记录数 
　FS输入的字段分隔符 
　NF当前记录的字段数目 
　NR到目前为止，读入的记录数目 
　OFS输出文件的字段分隔符 
　ORS输出文件的记录分隔符 
　RS输入记录的分隔符 
3、/ETC/RESOLV.conf文件是SCO的域名解释配置文件，格式：NAMESERVER IP地址,另外，必须在用户 
的.PROFILE文件里面加上一句，HOSTRESORDER="local nis bind";export HOSTRESORDER,这句话，是 
设置在主机解释域名的搜索顺序，先是本机，然后是NIS，再是DNS。 
4、在AWK中，数组的下标可以是数字，也可以是字符串，如，arr[1]或者是arr[sales]。 
5、split(string,arr,fs)函数可以把字符串STRING以FS为分隔符分解成为一个个的数组元素，放到ARR中。 
6、delete arr [subscript]删除数组ARR[subscript]元素。 
7、在AWK中，for( i in arr) statements是一个FOR循环。 
8、if (expression) statement1 [else statment2]; 
9、expression1 
    while(expression2) 
       {statement1;expression3} 
10、do {statement} while (expression) 
11、NEXT是强迫AWK读入下一个记录，进行处理 
12、在AWK中，PRINT或者是PRINTF输出表达式中如果有关系比较符号（如大于＞），则需要把PRINT或者是 
PRINTF用圆括号括起来,如print $0,($2 > $3)是打印记录，随后是1或者0；但是如果是print $0,$2 >;$3则 
是打印整条记录，第二个字段到文件名为$3的文件中去。 
13、在AWK中，可以用CLOSE关闭一个文件(CLOSE(filename));关闭一个管道(close(command_line)); 
14、在AWK中，输入可以用以下几种方式： 
     < filename 
     getline 
     getline <file 
     getline x <file 
     command | getline 
     command | getline x 
    如果GETLINE正确，则返回1，文件结束返回0，出错返回-1。 
15、在AWK中的一些字符处理函数： 
     gsub(r,s,t)以字符S替换满足正则表达式R的字符串T中R。 
     index(s,t)在字符串S中查找字符串T第一次出现的位置，没有则返回零。 
     legnth(s)测字符串S的长度。 
     match(s,re)在字符串S中查找正则表达式RE的第一次出现的位置，如果有则返回，同时置RSTART为 
该数字；如果没有则返回0。 
     split(string,arr,fs)见前面。 
     sprintf(format,expression,expression1,...) 
     sub(r,s,t)以s替换字符串T中的R。 
     substr(s,p)取字符中S从位置P开始的字符串。 
     substr(s,p,n)取字符中S从位置P开始的N个字符。 
     tolower(s) 
     toupper(s) 
  在字符处理函数中，如果被处理字符串为空，则缺省值是$0。 
16、在AWK中，还可以用system(command_line)运行系统命令。 
17、还可以自定义函数： 
    function name(parameter_list){
    statements
    return expression # the return statement and expression are optional 
    }
    其中，parameter_list是以逗号分隔的变量组合。在函数中如果变量少于定义的数字，则少的设为空；多的则被忽略。
    为了在函数中有返回值，必须在函数中有一句return expression 
18、在AWK中，如果要强制转换一个变量的类型，则需要number ""是强制number变量为字符型变量。 
19、在AWK中，把一个字符型变量强制转换成数值型，则需要string+0。 
20、AWK程序成功执行返回0，否则返回>;0 
21、在正则表达式中，",[ \t]* | [ \t]+"表示以，号和(或者)与空格空行的记录，或者是完全就是空格或者空行。
在正则表达式中*代表任意字符，+代表前缀字符的一个或者任意多个的组合。

awk   'BEGIN { max=100 ;print "max=" max}             BEGIN 表示在处理任意行之前进行的操作。
   {max=($1 >max ?$1:max); print $1,"Now max is "max}' file 取得文件第一个域的最大值。
   （表达式1?表达式2:表达式3 相当于：
   if (表达式1)
       表达式2
   else
       表达式3)
       
格式 描述 
%a 星期几的缩写(Sun) 
%A 星期几的完整写法(Sunday) 
%b 月名的缩写(Oct) 
%B 月名的完整写法(October) 
%c 本地日期和时间 
%d 十进制日期 
%D 日期 08/20/99 
%e 日期，如果只有一位会补上一个空格 
%H 用十进制表示24小时格式的小时 
%I 用十进制表示12小时格式的小时 
%j 从1月1日起一年中的第几天 
%m 十进制表示的月份 
%M 十进制表示的分钟 
%p 12小时表示法(AM/PM) 
%S 十进制表示的秒 
%U 十进制表示的一年中的第几个星期(星期天作为一个星期的开始) 
%w 十进制表示的星期几(星期天是0) 
%W 十进制表示的一年中的第几个星期(星期一作为一个星期的开始) 
%x 重新设置本地日期(08/20/99) 
%X 重新设置本地时间(12：00：00) 
%y 两位数字表示的年(99) 
%Y 当前月份 
%Z 时区(PDT) 
%% 百分号(%) 
实例： 
$ awk '{ now=strftime( "%D", systime() ); print now }' 
$ awk '{ now=strftime("%m/%d/%y"); print now }'


-v var=var_value
在awk程序执行前，把awk变量var的值设置为var_value，这个var变量在BEGIN块中也有效，经常用来把shell变量引入awk程序.
[oracle@Minerva practice]$ a=1
[oracle@Minerva practice]$ awk -v var=$a 'BEGIN{print var}'
1